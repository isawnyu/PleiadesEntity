Batch Loading of Entities
=========================

Setup

    >>> import transaction
    >>> self.setRoles(('Manager',))
    >>> folder = self.folder
    
Load one entity

    >>> from Products.PleiadesEntity.Extensions.loader import load_place
    >>> r = load_place(folder, "%s/batlas-65-2-24-frank.xml" % self.TEST_DATA, metadataId='cap-map65')
    
Feature
-------

One feature should be created, with one location, 2 names, and citing the 4 
references above.

    >>> fid = r['feature_id']
    >>> fid in folder['features'].keys()
    True
    >>> f = folder['features'][fid]
    >>> f.title_or_id()
    'Feature batlas-99-2-24 (attested: Aphrodisias/Ninoe)'
    >>> f.getFeatureType()
    []
    >>> f.getLocations()
    [<Location at /plone/Members/test_user_1_/features/.../position>]
    >>> list(f.getNames())
    [<Name at /plone/Members/test_user_1_/features/.../aphrodisias>, <Name at /plone/Members/test_user_1_/features/.../ninoe>]    
    >>> [ref for ref in f.getReferenceCitations()]
    [{'bibliographic_uri': '', 'alternate_uri': '', 'formatted_citation': '', 'short_title': 'BAtlas 65 A2 Aphrodisias/Ninoe', 'identifier': 'http://www.unc.edu/awmc/pleiades/bibliography/batlas.html', 'type': 'seeFurther', 'citation_detail': '', 'access_uri': ''}, {'bibliographic_uri': '', 'alternate_uri': '', 'formatted_citation': '', 'short_title': 'RE Aphrodisias 2', 'identifier': 'http://www.unc.edu/awmc/pleiades/bibliography/re.html', 'type': 'seeFurther', 'citation_detail': '', 'access_uri': ''}, {'bibliographic_uri': '', 'alternate_uri': '', 'formatted_citation': '', 'short_title': 'NPauly Aphrodisias 1', 'identifier': 'http://www.unc.edu/awmc/pleiades/bibliography/npauly.html', 'type': 'seeFurther', 'citation_detail': '', 'access_uri': ''}, {'bibliographic_uri': '', 'alternate_uri': '', 'formatted_citation': '', 'short_title': 'RE Ninoe', 'identifier': 'http://www.unc.edu/awmc/pleiades/bibliography/re.html', 'type': 'seeFurther', 'citation_detail': '', 'access_uri': ''}]
    
Feature Location
----------------

    >>> x = f.getLocations()[0]
    >>> x.id
    'position'
    >>> x.getGeometry()
    '{\n  "type": "Point",\n  "coordinates": [\n    28.7289,\n    37.7145\n  ]\n}'
    >>> x.Title()
    'Position'
    
Test credits and rights

    >>> x.Creators()
    ('C. Foss', 'S. Mitchell', 'test_user_1_')
    >>> x.Contributors()
    ('R. Talbert', 'T. Elliott', 'S. Gillies')
    >>> x.Rights()
    'Copyright \xc2\xa9 2007 Ancient World Mapping Center. All rights reserved.'
    
Test temporal attestations

    >>> x.getAttestations()
    [{'timePeriod': 'classical', 'confidence': 'confident'}, {'timePeriod': 'roman', 'confidence': 'confident'}, {'timePeriod': 'late-antique', 'confidence': 'confident'}]
    >>> x.getSortedTemporalAttestations()
    [{'timePeriod': 'classical', 'confidence': 'confident'}, {'timePeriod': 'roman', 'confidence': 'confident'}, {'timePeriod': 'late-antique', 'confidence': 'confident'}]
    
Check metadata reference

    >>> x.getAccuracy()
    <PositionalAccuracy at /plone/Members/test_user_1_/features/metadata/cap-map65>
    >>> x.getAccuracy().value
    0.01
    
Feature Names
-------------

    >>> sorted(f.keys())
    ['aphrodisias', 'ninoe', 'position']
    >>> names = f.getNames()
    >>> n = names[0]
    >>> n.nameTransliterated
    u'Aphrodisias'
    >>> n.Title()
    'Aphrodisias'
    >>> n.title
    u'Aphrodisias'
    >>> n.nameAttested
    u''
    >>> n.getNameLanguage()
    ''
    >>> n.getNameType()
    'geographic'
    >>> n.getAccuracy()
    'accurate'
    >>> n.getCompleteness()
    'complete'
    >>> n.Creators()
    ('C. Foss', 'S. Mitchell', 'test_user_1_')
    >>> n.Contributors()
    ('R. Talbert', 'T. Elliott', 'S. Gillies')
    >>> n.Rights()
    'Copyright \xc2\xa9 2007 Ancient World Mapping Center. All rights reserved.'
    
    >>> x.getAttestations()
    [{'timePeriod': 'classical', 'confidence': 'confident'}, {'timePeriod': 'roman', 'confidence': 'confident'}, {'timePeriod': 'late-antique', 'confidence': 'confident'}]
    
    >>> [ref for ref in n.getReferenceCitations()]
    [{'bibliographic_uri': '', 'alternate_uri': '', 'formatted_citation': '', 'short_title': 'RE Aphrodisias 2', 'identifier': 'http://www.unc.edu/awmc/pleiades/bibliography/re.html', 'type': 'seeFurther', 'citation_detail': '', 'access_uri': ''}, {'bibliographic_uri': '', 'alternate_uri': '', 'formatted_citation': '', 'short_title': 'NPauly Aphrodisias 1', 'identifier': 'http://www.unc.edu/awmc/pleiades/bibliography/npauly.html', 'type': 'seeFurther', 'citation_detail': '', 'access_uri': ''}]


Place
-----

By default, we create a place for every feature.

    >>> pid = r['place_id']
    >>> p = folder['places'][pid]
    >>> p.title_or_id()
    'Aphrodisias/Ninoe'
    >>> p.Title()
    'Aphrodisias/Ninoe'
    >>> p.getPlaceType()
    ['unknown']
    >>> p.getFeatureType()
    ['unknown']
    >>> p.modernLocation
    u'Geyre'
    >>> p.Creators()
    ('C. Foss', 'test_user_1_', 'S. Mitchell')
    >>> p.Contributors()
    ('R. Talbert', 'sgillies', 'thomase')
    >>> p.Rights()
    'Copyright \xc2\xa9 2007 Ancient World Mapping Center. All rights reserved.'
    >>> p.Description()
    'Containing ancient world features extracted from the Barrington Atlas and its Map-by-Map directory.'
    >>> p.getText()
    '<p>An ancient settlement, attested during the Classical, Roman and Late Antique periods (modern location: Geyre). It was known in antiquity by the names: Aphrodisias and Ninoe.</p>'


Load one nameless entity
========================

    >>> r = load_place(folder, "%s/batlas-65-2-101.xml" % self.TEST_DATA, metadataId='cap-map65')
    >>> pid = r['place_id']
    >>> r['name_ids']
    []

Check feature

    >>> p = folder['places'][pid]
    >>> contents = list(p.getFeatures())
    >>> len(contents)
    1    
    >>> f = contents[0]


Load one unlocated entity
=========================

    >>> r = load_place(folder, "%s/batlas-65-7-21.xml" % self.TEST_DATA, metadataId='cap-map65')
    >>> pid = r['place_id']
    >>> len(r['name_ids'])
    1

Check feature

    >>> p = folder['places'][pid]
    >>> p.getFeatureType()
    ['unknown']    
    >>> contents = list(p.getFeatures())
    >>> len(contents)
    1    
    >>> f = contents[0]
    >>> f.getLocations()
    []

