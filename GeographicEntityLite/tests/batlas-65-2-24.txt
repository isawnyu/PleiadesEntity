
    >>> folder = self.folder
        
    
    >>> enID = 'batlas-65-2-24'
    >>> folder.invokeFactory('GeographicEntityLite', id=enID)
    'batlas-65-2-24'
    >>> en = getattr(folder, enID)
    >>> en.setTitle(enID)
    >>> en.Title()
    'batlas-65-2-24'
    >>> en.setIdentifier(enID)
    >>> en.getIdentifier()
    'batlas-65-2-24'
    
    
    >>> en.setModernLocation(u'Geyre')
    >>> en.getModernLocation()
    'Geyre'
    
    
    >>> en.setTimePeriods(['Classical', 'Roman', 'Late Antique'])
    >>> en.getTimePeriods()
    ('Classical', 'Roman', 'Late Antique')
        
    
    
    
    >>> en.setGeoEntityType('settlement')
    >>> en.getGeoEntityType()
    'settlement'
    
    
        
    >>> en.setSecondaryReferences(['BAtlas 65 A2 Aphrodisias/Ninoe', 'RE 2', 'NPauly 1', 'RE'])
    >>> en.getSecondaryReferences()
    ('BAtlas 65 A2 Aphrodisias/Ninoe', 'RE 2', 'NPauly 1', 'RE')
        
        
        
        
    
    
        
    >>> en.setSpatialCoordinates('37.7144599999992 28.7288599999993 0.0')
    >>> en.getSpatialCoordinates()
    '37.7144599999992 28.7288599999993 0.0'        
    >>> en.setSpatialGeometryType('point')
    >>> en.getSpatialGeometryType()
    'point'        
    
    
    
    >>> nameID = 'batlas-65-2-24-n1'
    >>> en.invokeFactory('GeographicNameLite', id=nameID)
    'batlas-65-2-24-n1'
    >>> en_name = getattr(en, nameID)
    >>> en_name.setIdentifier('batlas-65-2-24-n1')
    >>> en_name.getIdentifier()
    'batlas-65-2-24-n1'
        
        
    >>> en_name.setNameAttested(u'\x1F08\x3C6\x3C1\x3BF\x3B4\x3B9\x3C3\x3B9\x1F71\x3C2')
    >>> en_name.getNameAttested()
    u'\x1F08\x3C6\x3C1\x3BF\x3B4\x3B9\x3C3\x3B9\x1F71\x3C2'
        
    >>> en_name.setNameLanguage('Ancient Greek')
    >>> en_name.getNameLanguage()
    'Ancient Greek
        
    >>> en_name.setTitle('Aphrodisias')
    >>> en_name.Title()
    'Aphrodisias'
    
        
    >>> test_msg = 'There is an xml element in the test data that was not handled by the maketest.xsl transformation. Element name = classificationSection'
    >>> print test_msg
    ''
    
        
    >>> en.setTimePeriods(['Roman', 'Late Antique'])
    >>> en.getTimePeriods()
    ('Roman', 'Late Antique')
        
        
        
            
    >>> en.setSecondaryReferences(['RE 2', 'NPauly 1'])
    >>> en.getSecondaryReferences()
    ('RE 2', 'NPauly 1')
        
            
        
    
    
    >>> nameID = 'batlas-65-2-24-n2'
    >>> en.invokeFactory('GeographicNameLite', id=nameID)
    'batlas-65-2-24-n2'
    >>> en_name = getattr(en, nameID)
    >>> en_name.setIdentifier('batlas-65-2-24-n2')
    >>> en_name.getIdentifier()
    'batlas-65-2-24-n2'
        
        
    >>> en_name.setNameAttested(u'\x39D\x3B9\x3BD\x1F79\x3B7')
    >>> en_name.getNameAttested()
    u'\x39D\x3B9\x3BD\x1F79\x3B7'
        
    >>> en_name.setNameLanguage('Ancient Greek')
    >>> en_name.getNameLanguage()
    'Ancient Greek
        
    >>> en_name.setTitle('Ninoe')
    >>> en_name.Title()
    'Ninoe'
    
        
    >>> test_msg = 'There is an xml element in the test data that was not handled by the maketest.xsl transformation. Element name = classificationSection'
    >>> print test_msg
    ''
    
        
    >>> en.setTimePeriods(['Classical'])
    >>> en.getTimePeriods()
    ('Classical')
        
        
            
    >>> en.setSecondaryReferences(['RE'])
    >>> en.getSecondaryReferences()
    ('RE')
        
        
    
    
    >>> nameID = 'batlas-65-2-24-n3'
    >>> en.invokeFactory('GeographicNameLite', id=nameID)
    'batlas-65-2-24-n3'
    >>> en_name = getattr(en, nameID)
    >>> en_name.setIdentifier('batlas-65-2-24-n3')
    >>> en_name.getIdentifier()
    'batlas-65-2-24-n3'
        
        
    >>> en_name.setNameAttested(u'Aphrodisiensis')
    >>> en_name.getNameAttested()
    u'Aphrodisiensis'
        
    >>> en_name.setNameLanguage('Latin')
    >>> en_name.getNameLanguage()
    'Latin
        
    >>> en_name.setTitle('Aphrodisiensis')
    >>> en_name.Title()
    'Aphrodisiensis'
    
        
    >>> test_msg = 'There is an xml element in the test data that was not handled by the maketest.xsl transformation. Element name = classificationSection'
    >>> print test_msg
    ''
    
        
    >>> en.setTimePeriods(['Classical'])
    >>> en.getTimePeriods()
    ('Classical')
        
    
