PublishGeoEntity.txt
====================

Test publishing of GeographicEntityLite objects.

A lot of this is cribbed from optilude's tutorial on plone.org.

Setup the test fixture

    >>> folder = self.folder

Add one complete entity to the folder and check that it is complete

    >>> enID = 'batlas-65-2-12'
    >>> folder.invokeFactory('GeographicEntityLite', id=enID)
    'batlas-65-2-12'
    
    >>> en = getattr(folder, enID)

    >>> en.setTitle(enID)
    >>> en.Title()
    'batlas-65-2-12'
    
    >>> en.setDescription(u'An ancient settlement, attested from the Hellenistic to the Late Antique periods and located at modern Hisartepe, near Kızılca. It was known in antiquity by the name \'Amblada\'.')
    >>> en.Description()
    "An ancient settlement, attested from the Hellenistic to the Late Antique periods and located at modern Hisartepe, near K\xc3\x84\xc2\xb1z\xc3\x84\xc2\xb1lca. It was known in antiquity by the name 'Amblada'."
    
    >>> en.setGeoEntityType('settlement')
    >>> en.getGeoEntityType()
    'settlement'
    
    >>> en.setModernLocation(u'Hisartepe, near Kızılca')
    >>> en.getModernLocation()
    'Hisartepe, near K\xc3\x84\xc2\xb1z\xc3\x84\xc2\xb1lca'
    
    >>> en.setTimePeriods(['Hellenistic (Roman Republic)', 'Roman', 'Late Antique'])
    >>> en.getTimePeriods()
    ('Hellenistic (Roman Republic)', 'Roman', 'Late Antique')
    
    >>> en.setSecondaryReferences(['BAtlas 65 G2 Amblada', 'von Aulock 1977, 22-23', 'TIB Galatien 122'])
    >>> en.getSecondaryReferences()
    ('BAtlas 65 G2 Amblada', 'von Aulock 1977, 22-23', 'TIB Galatien 122')
    
    >>> en.setSpatialCoordinates('37.5254199999999 31.7393100000008 0.0')
    >>> en.getSpatialCoordinates()
    '37.5254199999999 31.7393100000008 0.0'
    
    >>> nameID = enID + '-n1'
    >>> en.invokeFactory('GeographicNameLite', id=nameID)
    'batlas-65-2-12-n1'
    
    >>> en_name = getattr(en, nameID)

    >>> en_name.setTitle(nameID)
    >>> en_name.Title()
    'batlas-65-2-12-n1'
    
    >>> en_name.setDescription(u'An attested name for an ancient settlement located at modern Hisartepe, near Kızılca.')
    >>> en_name.Description()
    'An attested name for an ancient settlement located at modern Hisartepe, near K\xc3\x84\xc2\xb1z\xc3\x84\xc2\xb1lca.'
    
    >>> en_name.setNameAttested(u'Ἄμβλαδα')
    >>> en_name.getNameAttested()
    '\xc3\xa1\xc2\xbc\xc2\x8c\xc3\x8e\xc2\xbc\xc3\x8e\xc2\xb2\xc3\x8e\xc2\xbb\xc3\x8e\xc2\xb1\xc3\x8e\xc2\xb4\xc3\x8e\xc2\xb1'
    
    >>> en_name.setNameTransliterated('Amblada')
    >>> en_name.getNameTransliterated()
    'Amblada'
    
    >>> en_name.setNameLanguage('Ancient Greek')
    >>> en_name.getNameLanguage()
    'Ancient Greek'

    >>> en_name.setTimePeriods([])
    >>> en_name.getTimePeriods()
    ()
    
    >>> en_name.setPrimaryReferences([])
    >>> en_name.getPrimaryReferences()
    ()
    
    >>> en_name.setSecondaryReferences([])
    >>> en_name.getSecondaryReferences()
    ()
    
Initialize the test browser

    >>> from Products.Five.testbrowser import Browser
    >>> browser = Browser()
    >>> browser.handleErrors = False

Let us log all exceptions, which is useful for debugging. Also, clear portlet
slots, to make the test browser less confused by things like the recent portlet
and the navtree.

    >>> self.portal.error_log._ignored_exceptions = ()
    >>> self.portal.left_slots = self.portal.right_slots = []

Browse the entity

    >>> entity_url = en.absolute_url()
    >>> browser.open(entity_url)

Check the URL 

    >>> browser.url == entity_url
    True
    >>> browser.url.endswith('batlas-65-2-12')
    True
    
Check the html title
    >>> title = browser.title
    >>> title.strip().startswith('batlas-65-2-12\n')
    True
    
Check the html content of the view page (description will not appear here)
This is an imperfect text. Ideally, we'd parse the html and get specific, but
not yet.
    >>> browser.contents
    '...batlas-65-2-12...'
    >>> browser.contents
    '...settlement...'
    >>> browser.contents
    '...Hisartepe, near K\xc3\x84\xc2\xb1z\xc3\x84\xc2\xb1lca...'
    >>> browser.contents
    '...Hellenistic (Roman Republic)...'
    >>> browser.contents
    '...Roman...'
    >>> browser.contents
    '...Late Antique...'
    >>> browser.contents
    '...BAtlas 65 G2 Amblada...'
    >>> browser.contents
    '...von Aulock 1977, 22-23...'
    >>> browser.contents
    '...TIB Galatien 122...'
    >>> browser.contents
    '...37.5254199999999 31.7393100000008 0.0...'

Browse to the name
    >>> link = browser.getLink('batlas-65-2-12-n1')
    >>> link.click()
    
Check the url
    >>> browser.url == entity_url + '/batlas-65-2-12-n1/'
    True
    
Check the html title
    >>> title = browser.title
    >>> title.strip().startswith('batlas-65-2-12-n1\n')
    True    
    
Check the html content of the view page (description will not appear here)
This is an imperfect text. Ideally, we'd parse the html and get specific, but
not yet.
    >>> browser.contents
    '...batlas-65-2-12-n1...'
    >>> browser.contents
    '...\xc3\xa1\xc2\xbc\xc2\x8c\xc3\x8e\xc2\xbc\xc3\x8e\xc2\xb2\xc3\x8e\xc2\xbb\xc3\x8e\xc2\xb1\xc3\x8e\xc2\xb4\xc3\x8e\xc2\xb1...'
    >>> browser.contents
    '...Amblada...'
    >>> browser.contents
    '...Ancient Greek...'
    
