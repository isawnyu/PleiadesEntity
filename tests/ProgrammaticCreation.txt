===========================================================================
Copyright (C) 2006 Ancient World Mapping Center
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

About Pleiades
--------------

Pleiades is an international research network and associated web portal and
content management system devoted to the study of ancient geography. 

See http://icon.stoa.org/trac/pleiades/wiki.

Funding for the creation of this software was provided by a grant from the 
U.S. National Endowment for the Humanities (http://www.neh.gov).
===========================================================================
ProgrammaticCreation.txt
===========================================================================

Test our ability to create and retrieve GeographicEntity objects and their
subordinate  objects

optilude's tutorial on plone.org pointed the way to the sunlight

Note that this test deliberately avoids dealing with unicode characters whose 
codepoints exceed 0xFF (255).

Setup the test fixture and get a reference to a Plone folder therein

    >>> folder = self.folder

Add one complete entity to the folder and check all its attributes

    >>> enID = 'tatlas-77pdq'
    >>> folder.invokeFactory('GeographicEntity', id=enID)
    'tatlas-77pdq'
    
Attempt to get a reference to the entity
    >>> en = getattr(folder, enID)

Set the title to the entity (Zope) title to match the ID until we know what the entity's names are
    >>> en.setTitle(enID)
    >>> en.Title()
    'tatlas-77pdq'
    
Set the standard description
    >>> en.setDescription(u'A historic settlement, attested from the early 19th century and located at modern Ryland, near Huntsville. It was known in earlier times by the name(s): \'Ryland Mill\', \'Ryland Gin\'.')
    >>> en.Description()
    "A historic settlement, attested from the early 19th century and located at modern Ryland, near Huntsville. It was known in earlier times by the name(s): 'Ryland Mill', 'Ryland Gin'."
    
Set the project identifier.
    >>> en.setIdentifier(enID)
    >>> en.getIdentifier()
    'tatlas-77pdq'

Set the type of geographic entity
    >>> en.setGeoEntityType('settlement')
    >>> en.getGeoEntityType()
    'settlement'
    
Set the modern location string
    >>> en.setModernLocation(u'Ryland, near Huntsville')
    >>> en.getModernLocation()
    'Ryland, near Huntsville'
    
Historical periods for the entity
    >>> en.setTimePeriods(['19th Century', '20th Century', '21st Century'])
    >>> en.getTimePeriods()
    ('19th Century', '20th Century', '21st Century')
    
References to secondary literature
    >>> en.setSecondaryReferences(['TAtlas 65 Q2 Ryland', 'Elliott 2008, 22-23'])
    >>> en.getSecondaryReferences()
    ('TAtlas 65 Q2 Ryland', 'Elliott 2008, 22-23')
    
Set the spatial coordinates
    >>> en.setSpatialCoordinates('34.769722222222 -86.4808333333333 0.0')
    >>> en.getSpatialCoordinates()
    '34.769722222222 -86.4808333333333 0.0'
    
Set the spatial coordinate type
    >>> en.setSpatialGeometryType('point')
    >>> en.getSpatialGeometryType()
    'point'
    
Enter the historical names and their constituent attributes

    >>> nameID = enID + '-n1'
    >>> en.invokeFactory('GeographicName', id=nameID)
    'tatlas-77pdq-n1'
    
    >>> en_name = getattr(en, nameID)

    >>> en_name.setTitle('Ryland Mill')
    >>> en_name.Title()
    'Ryland Mill'

    >>> en_name.setIdentifier(nameID)
    >>> en_name.getIdentifier()
    'tatlas-77pdq-n1'
    
    >>> en_name.setGeoNameType('geographic')
    >>> en_name.getGeoNameType()
    'geographic'
    
    >>> en_name.setDescription(u'An attested name for a historical settlement located at modern Ryland, near Huntsville.')
    >>> en_name.Description()
    'An attested name for a historical settlement located at modern Ryland, near Huntsville.'
    
    >>> en_name.setNameAttested(u'Ryland Mill')
    >>> en_name.getNameAttested()
    'Ryland Mill'
    
    >>> en_name.setNameLanguage('English')
    >>> en_name.getNameLanguage()
    'English'

    >>> en_name.setTimePeriods(['19th Century', '20th Century'])
    >>> en_name.getTimePeriods()
    ('19th Century', '20th Century')
    
    >>> en_name.setPrimaryReferences([])
    >>> en_name.getPrimaryReferences()
    ()
    
    >>> en_name.setSecondaryReferences([])
    >>> en_name.getSecondaryReferences()
    ()
    
    >>> nameID = enID + '-n2'
    >>> en.invokeFactory('GeographicName', id=nameID)
    'tatlas-77pdq-n2'
    
    >>> en_name = getattr(en, nameID)

    >>> en_name.setTitle('Ryland Gin')
    >>> en_name.Title()
    'Ryland Gin'

    >>> en_name.setIdentifier(nameID)
    >>> en_name.getIdentifier()
    'tatlas-77pdq-n2'
    
    >>> en_name.setGeoNameType('geographic')
    >>> en_name.getGeoNameType()
    'geographic'
    
    >>> en_name.setDescription(u'An attested name for a historical settlement located at modern Ryland, near Huntsville.')
    >>> en_name.Description()
    'An attested name for a historical settlement located at modern Ryland, near Huntsville.'
    
    >>> en_name.setNameAttested(u'Ryland Gin')
    >>> en_name.getNameAttested()
    'Ryland Gin'
    
    >>> en_name.setNameLanguage('English')
    >>> en_name.getNameLanguage()
    'English'

    >>> en_name.setTimePeriods(['19th Century', '20th Century'])
    >>> en_name.getTimePeriods()
    ('19th Century', '20th Century')
    
    >>> en_name.setPrimaryReferences([])
    >>> en_name.getPrimaryReferences()
    ()
    
    >>> en_name.setSecondaryReferences([])
    >>> en_name.getSecondaryReferences()
    ()

Re-set the entity title on the basis of the historical names
    
    >>> setGeoTitleFromNames(en) 
    'Ryland Mill/Ryland Gin'
    >>> en.Title()
    'Ryland Mill/Ryland Gin'
    
Initialize the test browser

    >>> from Products.Five.testbrowser import Browser
    >>> browser = Browser()
    >>> browser.handleErrors = False

Let us log all exceptions, which is useful for debugging. Also, clear portlet
slots, to make the test browser less confused by things like the recent portlet
and the navtree.

    >>> self.portal.error_log._ignored_exceptions = ()
    >>> self.portal.left_slots = self.portal.right_slots = []

Browse the entity

    >>> entity_url = en.absolute_url()
    >>> browser.open(entity_url)

Check the URL 

    >>> browser.url == entity_url
    True
    >>> browser.url.endswith('tatlas-77pdq')
    True
    
Check the html title
    >>> title = browser.title
    >>> title.strip().startswith('Ryland Mill/Ryland Gin\n')
    True
    
Check the html content of the view page (description will not appear here)
This is an imperfect text. Ideally, we'd parse the html and get specific, but
not yet.
    >>> browser.contents
    '...tatlas-77pdq...'
    >>> browser.contents
    '...settlement...'
    >>> browser.contents
    '...Ryland, near Huntsville...'
    >>> browser.contents
    '...19th Century...'
    >>> browser.contents
    '...20th Century...'
    >>> browser.contents
    '...21st Century...'
    >>> browser.contents
    '...TAtlas 65 Q2 Ryland...'
    >>> browser.contents
    '...Elliott 2008, 22-23...'
    >>> browser.contents
    '...34.769722222222 -86.4808333333333 0.0...'

Browse to the name
    >>> link = browser.getLink('tatlas-77pdq-n1')
    >>> link.click()
    
Check the url
    >>> browser.url == entity_url + '/tatlas-77pdq-n1/'
    True
    
Check the html title
    >>> title = browser.title
    >>> title.strip().startswith('Ryland Mill\n')
    True    
    
Check the html content of the view page (description will not appear here)
This is an imperfect text. Ideally, we'd parse the html and get specific, but
not yet.
    >>> browser.contents
    '...tatlas-77pdq-n1...'
    >>> browser.contents
    '...Ryland Mill...'
    >>> browser.contents
    '...geographic...'
    >>> browser.contents
    '...English...'
    >>> browser.contents
    '...19th Century...'
    >>> browser.contents
    '...20th Century...'

