
    # test programmatic manipulation of geoEntities and geoNames using data associated with entity ID = batlas-65-2-12
    # this set of tests check the load-from-file capabilities; there are other tests for attribute-by-attribute testing
        
    # set up a test folder in which to create the entity and its children
    >>> folder = self.folder
        
    >>> import os
    >>> source = os.path.sep.join([TEST_DATA, 'batlas-65-2-12.xml'])
    >>> load_place(folder, source)
    >>> enID = 'batlas-65-2-12'
    >>> en = getattr(folder, enID)
    
    >>> sourcetext = u'Hisartepe, near K\U00000131z\U00000131lca'
    >>> sourcetext_utf8 = sourcetext.encode('utf8')
    >>> resulttext_utf8 = en.getModernLocation()
    >>> resulttext_utf8 == sourcetext_utf8
    True
    >>> resulttext = unicode(resulttext_utf8, 'utf8')
    >>> resulttext == sourcetext
    True
    >>> resulttext == u'Hisartepe, near K\U00000131z\U00000131lca'
    True
    
    >>> sourcelist = ['Hellenistic (Roman Republic)', 'Roman', 'Late Antique']
    >>> results = en.getTimePeriods()
    
    >>> results[0] == 'Hellenistic (Roman Republic)'
    True
    
    >>> results[1] == 'Roman'
    True
    
    >>> results[2] == 'Late Antique'
    True
    
    # verify that we can retrieve the appropriate classification type(s)
    >>> en.getPlaceType()
    'settlement'
    
    # verify that we can set and retrieve a list of secondaryReferences
        
    >>> sourcelist = [u'BAtlas 65 G2 Amblada', u'von Aulock 1977, 22-23', u'TIB Galatien 122']
            
    >>> resultlist = en.getSecondaryReferences()
                
    >>> resultlist[0] == sourcelist[0].encode('utf8')
    True
    
    >>> resultlist[1] == sourcelist[1].encode('utf8')
    True
    
    >>> resultlist[2] == sourcelist[2].encode('utf8')
    True
    
    # verify that we can set and retrieve the spatialLocation and spatialGeometryType
        
    >>> en.getSpatialCoordinates()
    '37.5254199999999 31.7393100000008 0.0'        
    >>> en.getSpatialGeometryType()
    'point'        
    
    # verify that we can retrieve all information about the featureName
        
        
    # verify we can retrieve the name, by id, from its parent entity
    >>> nameID = 'batlas-65-2-12-n1'
    >>> en_name = getattr(en, nameID)

    # verify we can retrieve an appropriate description
    >>> soughtDescription = u'An ancient geographic name for a settlement, attested during the Hellenistic (Roman Republic), Roman and Late Antique periods.'
    >>> gotDescription = en_name.Description()
    >>> soughtDescription_utf8 = soughtDescription.encode('utf8')
    >>> soughtDescription_utf8 == gotDescription
    True
        
        
    # verify that we can set and retrieve an appropriate value for the name's title attribute (which should be an ASCII transliteration of the nameAttested value)        
    >>> en_name.Title()
    'Amblada'
    
    # verify that we can retrieve the appropriate classification type(s)
    >>> en_name.getNameType()
    'geographic'
    
    # verify that we can set and retrieve a list of creators
    >>> sourcelist = [u'C. Foss (compiler, west)', u'S. Mitchell (compiler)']
            
    >>> results = en_name.Creators()
                
    >>> results[0] == u'C. Foss (compiler, west)'
    True
    
    >>> results[1] == u'S. Mitchell (compiler)'
    True
    
    # verify that we can set and retrieve a list of contributors
    >>> sourcelist = [u'R. Talbert (editor)', u'T. Elliott (data normalization and xml encoding)']
            
    >>> results = en_name.Contributors()
                
    >>> results[0] == u'R. Talbert (editor)'
    True
    
    >>> results[1] == u'T. Elliott (data normalization and xml encoding)'
    True
    
    # verify that we can retrieve an appropriate value for the rights attribute
    >>> sourcetext = u'Copyright \U000000A9 2006 Ancient World Mapping Center. All rights reserved. This data is derived from original compilations prepared for the American Philological Association\U00000027s Classical Atlas Project (1988-2000). It is used here with permission of the APA. This data is intended solely for testing purposes in the context of the Ancient World Mapping Center\U00000027s Pleiades Project and may not be reused or redistributed. In its current state, this data may contain errors and omissions and is not appropriate for citation or scholarly use. Any errors or omissions are the result of prototype conversion software, still under development by the AWMC\U00000027s Pleiades Project, and do not reflect the quality and completeness of the original data nor the opinions of its scholarly compilers and editors.'
    >>> sourcetext_utf8 = sourcetext.encode('utf8')
        
    >>> resulttext_utf8 = en_name.Rights()
            
    >>> resulttext_utf8 == sourcetext_utf8
    True
    >>> resulttext = unicode(resulttext_utf8, 'utf8')
    >>> resulttext == sourcetext
    True
    >>> resulttext == u'Copyright \U000000A9 2006 Ancient World Mapping Center. All rights reserved. This data is derived from original compilations prepared for the American Philological Association\U00000027s Classical Atlas Project (1988-2000). It is used here with permission of the APA. This data is intended solely for testing purposes in the context of the Ancient World Mapping Center\U00000027s Pleiades Project and may not be reused or redistributed. In its current state, this data may contain errors and omissions and is not appropriate for citation or scholarly use. Any errors or omissions are the result of prototype conversion software, still under development by the AWMC\U00000027s Pleiades Project, and do not reflect the quality and completeness of the original data nor the opinions of its scholarly compilers and editors.'
    True
    
    # verify that we can set and retrieve a list of creators
    >>> sourcelist = [u'C. Foss (compiler, west)', u'S. Mitchell (compiler)']
            
    >>> results = en.Creators()
                
    >>> results[0] == u'C. Foss (compiler, west)'
    True
    
    >>> results[1] == u'S. Mitchell (compiler)'
    True
    
    # verify that we can set and retrieve a list of contributors
    >>> sourcelist = [u'R. Talbert (editor)', u'T. Elliott (data normalization and xml encoding)']
            
    >>> results = en.Contributors()
                
    >>> results[0] == u'R. Talbert (editor)'
    True
    
    >>> results[1] == u'T. Elliott (data normalization and xml encoding)'
    True
    
    # verify that we can retrieve an appropriate value for the rights attribute
    >>> sourcetext = u'Copyright \U000000A9 2006 Ancient World Mapping Center. All rights reserved. This data is derived from original compilations prepared for the American Philological Association\U00000027s Classical Atlas Project (1988-2000). It is used here with permission of the APA. This data is intended solely for testing purposes in the context of the Ancient World Mapping Center\U00000027s Pleiades Project and may not be reused or redistributed. In its current state, this data may contain errors and omissions and is not appropriate for citation or scholarly use. Any errors or omissions are the result of prototype conversion software, still under development by the AWMC\U00000027s Pleiades Project, and do not reflect the quality and completeness of the original data nor the opinions of its scholarly compilers and editors.'
    >>> sourcetext_utf8 = sourcetext.encode('utf8')
        
    >>> resulttext_utf8 = en.Rights()
            
    >>> resulttext_utf8 == sourcetext_utf8
    True
    >>> resulttext = unicode(resulttext_utf8, 'utf8')
    >>> resulttext == sourcetext
    True
    >>> resulttext == u'Copyright \U000000A9 2006 Ancient World Mapping Center. All rights reserved. This data is derived from original compilations prepared for the American Philological Association\U00000027s Classical Atlas Project (1988-2000). It is used here with permission of the APA. This data is intended solely for testing purposes in the context of the Ancient World Mapping Center\U00000027s Pleiades Project and may not be reused or redistributed. In its current state, this data may contain errors and omissions and is not appropriate for citation or scholarly use. Any errors or omissions are the result of prototype conversion software, still under development by the AWMC\U00000027s Pleiades Project, and do not reflect the quality and completeness of the original data nor the opinions of its scholarly compilers and editors.'
    True
    
    # verify that the programmatically created description matches our expectations
    >>> soughtDescription = u'An ancient settlement, attested during the Hellenistic (Roman Republic), Roman and Late Antique periods (modern location: Hisartepe, near K\U00000131z\U00000131lca). It was known in antiquity by the name: Amblada.'
    >>> gotDescription = en.Description()
    >>> soughtDescription_utf8 = soughtDescription.encode('utf8')
    >>> soughtDescription_utf8 == gotDescription
    True
    
