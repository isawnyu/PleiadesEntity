Batch Loading of Entities
=========================

Check catalogs
--------------

    >>> uc = self.portal.uid_catalog
    >>> rc = self.portal.reference_catalog

Setup
-----

    Enable types

    >>> lpf = self.portal.portal_types['Large Plone Folder']
    >>> lpf_allow = lpf.global_allow
    >>> lpf.global_allow = True

    >>> n = self.portal.portal_types['Name']
    >>> n_allow = n.global_allow
    >>> n.global_allow = True

    Alias the test folder

    >>> folder = self.folder

    Containers

    >>> _ = folder.invokeFactory('Large Plone Folder', id='names')
    >>> _ = folder.invokeFactory('LocationContainer', id='locations')
    >>> _ = folder.invokeFactory('PlaceContainer', id='places')

Load one entity
---------------

    >>> r = load_place(folder, "%s/batlas-65-2-24-frank.xml" % TEST_DATA)
    >>> pid = r['place_id']
    >>> int(pid) <= BA_ID_MAX
    True
    >>> r['name_ids']
    ['aphrodisias', 'ninoe']

    Test place

    >>> p = getattr(folder.places, pid)
    >>> p.title_or_id()
    'Aphrodisias/Ninoe'
    >>> p.Title()
    'Aphrodisias/Ninoe'
    >>> p.modernLocation
    u'Geyre'
    >>> p.getPlaceType()
    ['settlement']
    >>> p.Creators()
    ('C. Foss', 'S. Mitchell')
    >>> p.Contributors()
    ('R. Talbert', 'T. Elliott', 'S. Gillies')
    >>> p.Rights()
    'Copyright \xc2\xa9 2007 Ancient World Mapping Center. All rights reserved.'

    >>> p.Description()
    'An ancient settlement, attested during the Classical, Roman and Late Antique periods (modern location: Geyre). It was known in antiquity by the names: Aphrodisias and Ninoe.'

    Test Placeful Associations

    >>> assocs = p.getFolderContents({'meta_type':['PlacefulAssociation']})
    >>> aids = [a.id for a in assocs]
    >>> assoc = p[aids[0]]
    >>> srs = assoc.getFolderContents({'meta_type':['SecondaryReference']})
    >>> len(srs)
    4
    >>> [s.id for s in srs]
    ['65-a2-aphrodisias-ninoe', 'aphrodisias-2', 'aphrodisias-1', 'ninoe']
    >>> [s.Title for s in srs]
    ['BAtlas 65 A2 Aphrodisias/Ninoe', 'RE Aphrodisias 2', 'NPauly Aphrodisias 1', 'RE Ninoe']
    >>> [(assoc[s.id].getItem(), assoc[s.id].getRange()) for s in srs]
    [('http://www.unc.edu/awmc/pleiades/bibliography/batlas.html', '65 A2 Aphrodisias/Ninoe'), ('http://www.unc.edu/awmc/pleiades/bibliography/re.html', 'Aphrodisias 2'), ('http://www.unc.edu/awmc/pleiades/bibliography/npauly.html', 'Aphrodisias 1'), ('http://www.unc.edu/awmc/pleiades/bibliography/re.html', 'Ninoe')]

    Test names

    >>> n0 = getattr(folder.names, 'aphrodisias')
    >>> n0.nameTransliterated
    u'Aphrodisias'
    >>> n0.Title()
    'Aphrodisias'
    >>> n0.title
    u'Aphrodisias'
    >>> n0.nameAttested
    u''
    >>> n0.getNameLanguage()
    ''
    >>> n0.getNameType()
    'geographic'
    >>> n0.getAccuracy()
    'accurate'
    >>> n0.getCompleteness()
    'complete'
    >>> n0.Creators()
    ('C. Foss', 'S. Mitchell')
    >>> n0.Contributors()
    ('R. Talbert', 'T. Elliott', 'S. Gillies')
    >>> n0.Rights()
    'Copyright \xc2\xa9 2007 Ancient World Mapping Center. All rights reserved.'

    >>> tps = n0.getFolderContents({'meta_type':['TemporalAttestation']})
    >>> len(tps)
    2
    >>> tps[0].Title
    'Attested: Roman (30 BC - AD 300)'
    >>> tps[0].getId
    'roman'
    >>> tps[0].getAttestationConfidence
    'confident'
    >>> tps[1].Title
    'Attested: Late Antique (AD 300 - 625)'
    >>> tps[1].getId
    'late-antique'
    >>> tps[1].getAttestationConfidence
    'confident'
    
    >>> srs = n0.getFolderContents({'meta_type':['SecondaryReference']})
    >>> len(srs)
    2
    >>> [s.id for s in srs]
    ['aphrodisias-2', 'aphrodisias-1']
    >>> [s.Title for s in srs]
    ['RE Aphrodisias 2', 'NPauly Aphrodisias 1']
    >>> [(n0[s.id].getItem(), n0[s.id].getRange()) for s in srs]
    [('http://www.unc.edu/awmc/pleiades/bibliography/re.html', 'Aphrodisias 2'), ('http://www.unc.edu/awmc/pleiades/bibliography/npauly.html', 'Aphrodisias 1')]


    >>> n0.getTimePeriods()
    ['roman', 'late-antique']
    
    

    >>> n1 = getattr(folder.names, 'ninoe')
    >>> n1.title
    u'Ninoe'
    >>> n1.Title()
    'Ninoe'
    >>> n1.nameAttested
    u''
    
    >>> tps = n1.getFolderContents({'meta_type':['TemporalAttestation']})
    >>> len(tps)
    1
    >>> tps[0].Title
    'Attested: Classical (550 - 330 BC)'
    >>> tps[0].getId
    'classical'
    >>> tps[0].getAttestationConfidence
    'confident'
    >>> srs = n1.getFolderContents({'meta_type':['SecondaryReference']})
    >>> len(srs)
    1
    >>> srs[0].Title
    'RE Ninoe'

    Test locations

    >>> lid = r['location_ids'][0]
    >>> l = getattr(folder.locations, lid)
    >>> l.geometryType
    u'Point'
    >>> l.getGeometryType()
    'Point'
    >>> l.spatialCoordinates
    u'37.7145 28.7289'
    >>> l.getSpatialCoordinates()
    '37.7145 28.7289'
    >>> l.title_or_id() == "Point %s" % lid
    True
    >>> l.Title() == "Point %s" % lid
    True
    >>> l.Creators()
    ('C. Foss', 'S. Mitchell')
    >>> l.Contributors()
    ('R. Talbert', 'T. Elliott', 'S. Gillies')
    >>> l.Rights()
    'Copyright \xc2\xa9 2007 Ancient World Mapping Center. All rights reserved.'


    Test time periods for locations
    >>> tps = l.getFolderContents({'meta_type':['TemporalAttestation']})
    >>> len(tps)
    3
    >>> tps[0].Title
    'Attested: Classical (550 - 330 BC)'
    >>> tps[0].getId
    'classical'
    >>> tps[0].getAttestationConfidence
    'confident'
    >>> tps[1].Title
    'Attested: Roman (30 BC - AD 300)'
    >>> tps[1].getId
    'roman'
    >>> tps[1].getAttestationConfidence
    'confident'
    >>> tps[2].Title
    'Attested: Late Antique (AD 300 - 625)'
    >>> tps[2].getId
    'late-antique'
    >>> tps[2].getAttestationConfidence
    'confident'
    >>> l.getTimePeriods()
    ['classical', 'roman', 'late-antique']

    Check Place time periods

    >>> p.getTimePeriods()
    ['roman', 'late-antique', 'classical']


    Test associations

    >>> contents = p.listFolderContents()
    >>> len(contents)
    2
    
    >>> contents[0].getRefs('hasName')[0] = n0
    >>> contents[1].getRefs('hasName')[0] = n1
    >>> contents[0].getRefs('hasLocation')[0] = l
    >>> contents[1].getRefs('hasLocation')[0] = l

    >>> a = contents[0]
    >>> a.getPlaceType()
    'settlement'
    >>> a.getAssociationCertainty()
    'certain'

    Test bibliographic references

    >>> srefs = a.getFolderContents({'meta_type':['SecondaryReference']})
    >>> len(srefs)
    4
    
    >>> srefs[0].Title
    'BAtlas 65 A2 Aphrodisias/Ninoe'
    >>> srefs[1].Title
    'RE Aphrodisias 2'
    >>> srefs[2].Title
    'NPauly Aphrodisias 1'
    >>> srefs[3].Title
    'RE Ninoe'
    
Test the geo adapters
---------------------

    >>> from Products.PleiadesGeocoder.interfaces import IGeoItemSimple, IGeoCollectionSimple

    >>> g = IGeoItemSimple(p)
    >>> g.isGeoreferenced()
    True
    >>> g.getInfo()
    {'description': 'An ancient settlement, attested during the Classical, Roman and Late Antique periods (modern location: Geyre). It was known in antiquity by the names: Aphrodisias and Ninoe.', 'spatialCoordinates': '37.7145 28.7289 0.0', 'url': 'http://nohost/plone/Members/test_user_1_/places/638753', 'title': 'Aphrodisias/Ninoe', 'srs': 'EPSG:4326', 'geometryType': 'point', 'id': '638753'}

    >>> c = IGeoCollectionSimple(folder.places)
    >>> c.getItemsInfo()
    [{'description': 'An ancient settlement, attested during the Classical, Roman and Late Antique periods (modern location: Geyre). It was known in antiquity by the names: Aphrodisias and Ninoe.', 'spatialCoordinates': '37.7145 28.7289 0.0', 'url': 'http://nohost/plone/Members/test_user_1_/places/638753', 'title': 'Aphrodisias/Ninoe', 'srs': 'EPSG:4326', 'geometryType': 'point', 'id': '638753'}]

Load one nameless entity
------------------------

    >>> r = load_place(folder, "%s/batlas-65-2-101.xml" % TEST_DATA)
    >>> pid = r['place_id']
    >>> int(pid) <= BA_ID_MAX
    True
    >>> r['name_ids']
    []

    Test associations

    >>> p = getattr(folder.places, pid)
    >>> contents = p.listFolderContents()
    >>> len(contents)
    1
    
    >>> a = contents[0]
    >>> a.getRefs('hasName')
    []
    >>> a.getPlaceType()
    'fort'
    >>> a.getAssociationCertainty()
    'certain'

    >>> g = IGeoItemSimple(p)
    >>> g.isGeoreferenced()
    True
    >>> g.getInfo()
    {'description': 'An ancient fort, attested during the Roman period (modern location: Emeriye). Its ancient name is not known.', 'spatialCoordinates': '37.1751 31.7324 0.0', 'url': 'http://nohost/plone/Members/test_user_1_/places/638830', 'title': '638830', 'srs': 'EPSG:4326', 'geometryType': 'point', 'id': '638830'}

Load one unlocated entity
-------------------------

    >>> r = load_place(folder, "%s/batlas-65-7-21.xml" % TEST_DATA)
    >>> pid = r['place_id']
    >>> int(pid) <= BA_ID_MAX
    True
    >>> r['name_ids']
    ['gordiouteichos']

    Test associations

    >>> p = getattr(folder.places, pid)
    >>> contents = p.listFolderContents()
    >>> len(contents)
    1
    
    >>> a = contents[0]
    >>> a.getRefs('hasLocation')
    []
    >>> a.getPlaceType()
    'undefined'
    >>> a.getAssociationCertainty()
    'certain'

    >>> g = IGeoItemSimple(p)
    >>> g.isGeoreferenced()
    False

