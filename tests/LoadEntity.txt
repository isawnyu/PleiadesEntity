Batch Loading of Entities
=========================

Setup
-----

    >>> import transaction
    >>> self.setRoles(('Manager',))
    >>> folder = self.folder

Load one entity
---------------

    >>> TEST_DATA = self.test_params.TEST_DATA
    >>> from Products.PleiadesEntity.Extensions.loader import load_place
    >>> r = load_place(folder, "%s/batlas-65-2-24-frank.xml" % TEST_DATA)
    >>> pid = r['place_id']
    >>> nids = r['name_ids']
    >>> len(nids)
    2

    Test place

    >>> p = folder['places'][pid]
    >>> p.title_or_id()
    'Aphrodisias/Ninoe'
    >>> p.Title()
    'Aphrodisias/Ninoe'
    >>> p.modernLocation
    u'Geyre'
    >>> p.getPlaceType()
    ['settlement']
    >>> p.Creators()
    ('C. Foss', 'S. Mitchell')
    >>> p.Contributors()
    ('R. Talbert', 'T. Elliott', 'S. Gillies')
    >>> p.Rights()
    'Copyright \xc2\xa9 2007 Ancient World Mapping Center. All rights reserved.'

    >>> p.Description()
    'An ancient settlement, attested during the Classical, Roman and Late Antique periods (modern location: Geyre). It was known in antiquity by the names: Aphrodisias and Ninoe.'

    Test Placeful Associations

    >>> features = list(p.getFeatures())
    >>> fids = [f.id for f in features]
    >>> f = folder['features'][fids[0]]
    >>> srs = f.getFolderContents({'meta_type':['SecondaryReference']})
    >>> len(srs)
    4
    >>> [s.id for s in srs]
    ['batlas-65-a2-aphrodisias-ninoe', 're-aphrodisias-2', 'npauly-aphrodisias-1', 're-ninoe']
    >>> [s.Title for s in srs]
    ['BAtlas 65 A2 Aphrodisias/Ninoe', 'RE Aphrodisias 2', 'NPauly Aphrodisias 1', 'RE Ninoe']
    >>> [(f[s.id].getItem(), f[s.id].getRange()) for s in srs]
    [('http://www.unc.edu/awmc/pleiades/bibliography/batlas.html', 'BAtlas 65 A2 Aphrodisias/Ninoe'), ('http://www.unc.edu/awmc/pleiades/bibliography/re.html', 'RE Aphrodisias 2'), ('http://www.unc.edu/awmc/pleiades/bibliography/npauly.html', 'NPauly Aphrodisias 1'), ('http://www.unc.edu/awmc/pleiades/bibliography/re.html', 'RE Ninoe')]

    Test names

    >>> n0 = folder['names'][nids[0]]
    >>> n0.nameTransliterated
    u'Aphrodisias'
    >>> n0.Title()
    'Aphrodisias'
    >>> n0.title
    u'Aphrodisias'
    >>> n0.nameAttested
    u''
    >>> n0.getNameLanguage()
    ''
    >>> n0.getNameType()
    'geographic'
    >>> n0.getAccuracy()
    'accurate'
    >>> n0.getCompleteness()
    'complete'
    >>> n0.Creators()
    ('C. Foss', 'S. Mitchell')
    >>> n0.Contributors()
    ('R. Talbert', 'T. Elliott', 'S. Gillies')
    >>> n0.Rights()
    'Copyright \xc2\xa9 2007 Ancient World Mapping Center. All rights reserved.'

    >>> tps = n0.getFolderContents({'meta_type':['TemporalAttestation']})
    >>> len(tps)
    2
    >>> tps0 = tps[0].getObject()
    >>> tps0.Title()
    'Attested: Roman (30 BC - AD 300)'
    >>> tps0.getId()
    'roman'
    >>> tps0.getAttestationConfidence()
    'confident'
    >>> tps1 = tps[1].getObject()
    >>> tps1.Title()
    'Attested: Late Antique (AD 300 - 625)'
    >>> tps1.getId()
    'late-antique'
    >>> tps1.getAttestationConfidence()
    'confident'
    
    >>> srs = n0.getFolderContents({'meta_type':['SecondaryReference']})
    >>> len(srs)
    2
    >>> [s.id for s in srs]
    ['re-aphrodisias-2', 'npauly-aphrodisias-1']
    >>> [s.Title for s in srs]
    ['RE Aphrodisias 2', 'NPauly Aphrodisias 1']
    >>> [(n0[s.id].getItem(), n0[s.id].getRange()) for s in srs]
    [('http://www.unc.edu/awmc/pleiades/bibliography/re.html', 'RE Aphrodisias 2'), ('http://www.unc.edu/awmc/pleiades/bibliography/npauly.html', 'NPauly Aphrodisias 1')]

    >>> n0.getTimePeriods()
    ['roman', 'late-antique']

    >>> n1 = folder['names'][nids[1]]
    >>> n1.title
    u'Ninoe'
    >>> n1.Title()
    'Ninoe'
    >>> n1.nameAttested
    u''
    
    >>> tps = n1.getFolderContents({'meta_type':['TemporalAttestation']})
    >>> len(tps)
    1
    >>> tps0 = tps[0].getObject()
    >>> tps0.Title()
    'Attested: Classical (550 - 330 BC)'
    >>> tps0.getId()
    'classical'
    >>> tps0.getAttestationConfidence()
    'confident'
    >>> srs = n1.getFolderContents({'meta_type':['SecondaryReference']})
    >>> len(srs)
    1
    >>> srs[0].Title
    'RE Ninoe'

    Test locations

    >>> lid = r['location_ids'][0]
    >>> l = folder['locations'][lid]
    >>> l.getGeometry()
    'Point:[28.7289,37.7145]'
    >>> l.title_or_id() == "Point %s" % lid
    True
    >>> l.Title() == "Point %s" % lid
    True
    >>> l.Creators()
    ('C. Foss', 'S. Mitchell')
    >>> l.Contributors()
    ('R. Talbert', 'T. Elliott', 'S. Gillies')
    >>> l.Rights()
    'Copyright \xc2\xa9 2007 Ancient World Mapping Center. All rights reserved.'

    Test time periods for locations

    >>> tps = l.getFolderContents({'meta_type':['TemporalAttestation']})
    >>> len(tps)
    3
    >>> tps0 = tps[0].getObject()
    >>> tps0.Title()
    'Attested: Classical (550 - 330 BC)'
    >>> tps0.getId()
    'classical'
    >>> tps0.getAttestationConfidence()
    'confident'
    >>> tps1 = tps[1].getObject()
    >>> tps1.Title()
    'Attested: Roman (30 BC - AD 300)'
    >>> tps1.getId()
    'roman'
    >>> tps1.getAttestationConfidence()
    'confident'
    >>> tps2 = tps[2].getObject()
    >>> tps2.Title()
    'Attested: Late Antique (AD 300 - 625)'
    >>> tps2.getId()
    'late-antique'
    >>> tps2.getAttestationConfidence()
    'confident'
    >>> l.getTimePeriods()
    ['classical', 'roman', 'late-antique']

    Check Place time periods

    >>> p.getTimePeriods()
    ['roman', 'late-antique', 'classical']

    Test associations

    >>> contents = list(p.getFeatures())
    >>> len(contents)
    2
    
    >>> contents[0].getRefs('hasName')[0] = n0
    >>> contents[1].getRefs('hasName')[0] = n1
    >>> contents[0].getRefs('hasLocation')[0] = l
    >>> contents[1].getRefs('hasLocation')[0] = l

    >>> a = contents[0]
    >>> a.getFeatureType()
    'settlement'
    >>> a.getAssociationCertainty()
    'certain'

    Test bibliographic references

    >>> srefs = a.getFolderContents({'meta_type':['SecondaryReference']})
    >>> len(srefs)
    4
    
    >>> srefs[0].Title
    'BAtlas 65 A2 Aphrodisias/Ninoe'
    >>> srefs[1].Title
    'RE Aphrodisias 2'
    >>> srefs[2].Title
    'NPauly Aphrodisias 1'
    >>> srefs[3].Title
    'RE Ninoe'
    
Load one nameless entity
------------------------

    >>> r = load_place(folder, "%s/batlas-65-2-101.xml" % TEST_DATA)
    >>> pid = r['place_id']
    >>> r['name_ids']
    []

    Test associations

    >>> p = folder['places'][pid]
    >>> contents = list(p.getFeatures())
    >>> len(contents)
    1
    
    >>> a = contents[0]
    >>> a.getRefs('hasName')
    []
    >>> a.getFeatureType()
    'fort'
    >>> a.getAssociationCertainty()
    'certain'

Load one unlocated entity
-------------------------

    >>> r = load_place(folder, "%s/batlas-65-7-21.xml" % TEST_DATA)
    >>> pid = r['place_id']
    >>> len(r['name_ids'])
    1

    Test associations

    >>> p = folder['places'][pid]
    >>> contents = list(p.getFeatures())
    >>> len(contents)
    1
    
    >>> a = contents[0]
    >>> a.getRefs('hasLocation')
    []
    >>> a.getFeatureType()
    'undefined'
    >>> a.getAssociationCertainty()
    'certain'
