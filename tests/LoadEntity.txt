Batch Loading of Entities
=========================

Setup

    >>> import transaction
    >>> self.setRoles(('Manager',))
    >>> folder = self.folder
    
Load one entity

    >>> TEST_DATA = self.test_params.TEST_DATA
    >>> from Products.PleiadesEntity.Extensions.loader import load_place
    >>> r = load_place(folder, "%s/batlas-65-2-24-frank.xml" % TEST_DATA, 'cap-map65')
    
References
----------

We expect 4 references to have been created in the process
(maybe move this down)

    >>> references = folder['references']
    >>> sorted(references.keys())
    ['batlas-65-a2-aphrodisias-ninoe', 'npauly-aphrodisias-1', 're-aphrodisias-2', 're-ninoe']
    >>> sorted(ref.Title() for ref in references.values())
    ['BAtlas 65 A2 Aphrodisias/Ninoe', 'NPauly Aphrodisias 1', 'RE Aphrodisias 2', 'RE Ninoe']
    >>> sorted((ref.getItem(), ref.getRange()) for ref in references.values())
    [('http://www.unc.edu/awmc/pleiades/bibliography/batlas.html', 'BAtlas 65 A2 Aphrodisias/Ninoe'), ('http://www.unc.edu/awmc/pleiades/bibliography/npauly.html', 'NPauly Aphrodisias 1'), ('http://www.unc.edu/awmc/pleiades/bibliography/re.html', 'RE Aphrodisias 2'), ('http://www.unc.edu/awmc/pleiades/bibliography/re.html', 'RE Ninoe')]

Feature
-------

One feature should be created, with one location, 2 names, and citing the 4 
references above.

    >>> fid = r['feature_id']
    >>> fid in folder['features'].keys()
    True
    >>> f = folder['features'][fid]
    >>> f.getLocations()
    [<Location at /plone/Members/test_user_1_/features/.../position>]
    >>> list(f.getNames())
    [<Name at /plone/Members/test_user_1_/features/.../aphrodisias>, <Name at /plone/Members/test_user_1_/features/.../ninoe>]    
    >>> [ref for ref in f.getSecondaryReferences()]
    [<SecondaryReference at /plone/Members/test_user_1_/references/batlas-65-a2-aphrodisias-ninoe>, <SecondaryReference at /plone/Members/test_user_1_/references/re-aphrodisias-2>, <SecondaryReference at /plone/Members/test_user_1_/references/npauly-aphrodisias-1>, <SecondaryReference at /plone/Members/test_user_1_/references/re-ninoe>]
    
Feature Location
----------------

    >>> x = f.getLocations()[0]
    >>> x.id
    'position'
    >>> x.getGeometry()
    'Point:[28.7289,37.7145]'
    >>> x.Title()
    'Position'
    
Test credits and rights

    >>> x.Creators()
    ('C. Foss', 'S. Mitchell')
    >>> x.Contributors()
    ('R. Talbert', 'T. Elliott', 'S. Gillies')
    >>> x.Rights()
    'Copyright \xc2\xa9 2007 Ancient World Mapping Center. All rights reserved.'
    
Test temporal attestations

    >>> x.getAttestations()
    [{'timePeriod': 'classical', 'confidence': 'confident'}, {'timePeriod': 'roman', 'confidence': 'confident'}, {'timePeriod': 'late-antique', 'confidence': 'confident'}]
    >>> x.getSortedTemporalAttestations()
    [{'timePeriod': 'classical', 'confidence': 'confident'}, {'timePeriod': 'roman', 'confidence': 'confident'}, {'timePeriod': 'late-antique', 'confidence': 'confident'}]
    
Check metadata reference

    >>> x.getAccuracy()
    <PositionalAccuracy at /plone/Members/test_user_1_/features/metadata/cap-map65>
    >>> x.getAccuracy().value
    0.01
    
Feature Names
-------------

    >>> sorted(f.keys())
    ['aphrodisias', 'ninoe', 'position']
    >>> names = f.getNames()
    >>> n = names[0]
    >>> n.nameTransliterated
    u'Aphrodisias'
    >>> n.Title()
    'Aphrodisias'
    >>> n.title
    u'Aphrodisias'
    >>> n.nameAttested
    u''
    >>> n.getNameLanguage()
    ''
    >>> n.getNameType()
    'geographic'
    >>> n.getAccuracy()
    'accurate'
    >>> n.getCompleteness()
    'complete'
    >>> n.Creators()
    ('C. Foss', 'S. Mitchell')
    >>> n.Contributors()
    ('R. Talbert', 'T. Elliott', 'S. Gillies')
    >>> n.Rights()
    'Copyright \xc2\xa9 2007 Ancient World Mapping Center. All rights reserved.'
    
    >>> x.getAttestations()
    [{'timePeriod': 'classical', 'confidence': 'confident'}, {'timePeriod': 'roman', 'confidence': 'confident'}, {'timePeriod': 'late-antique', 'confidence': 'confident'}]
    
    >>> [ref for ref in n.getSecondaryReferences()]
    [<SecondaryReference at /plone/Members/test_user_1_/references/re-aphrodisias-2>, <SecondaryReference at /plone/Members/test_user_1_/references/npauly-aphrodisias-1>]


Place
-----

By default, we create a place for every feature.

    >>> pid = r['place_id']
    >>> p = folder['places'][pid]
    >>> p.title_or_id()
    'Aphrodisias/Ninoe'
    >>> p.Title()
    'Aphrodisias/Ninoe'
    >>> p.modernLocation
    u'Geyre'
    >>> p.Creators()
    ('C. Foss', 'S. Mitchell')
    >>> p.Contributors()
    ('R. Talbert', 'T. Elliott', 'S. Gillies')
    >>> p.Rights()
    'Copyright \xc2\xa9 2007 Ancient World Mapping Center. All rights reserved.'
    >>> p.Description()
    'An ancient settlement, attested during the Classical, Roman and Late Antique periods (modern location: Geyre). It was known in antiquity by the names: Aphrodisias and Ninoe.'


Load one nameless entity
========================

    >>> r = load_place(folder, "%s/batlas-65-2-101.xml" % TEST_DATA, 'cap-map65')
    >>> pid = r['place_id']
    >>> r['name_ids']
    []

Check feature

    >>> p = folder['places'][pid]
    >>> contents = list(p.getFeatures())
    >>> len(contents)
    1    
    >>> f = contents[0]
    >>> f.getFeatureType()
    'fort'


Load one unlocated entity
=========================

    >>> r = load_place(folder, "%s/batlas-65-7-21.xml" % TEST_DATA, 'cap-map65')
    >>> pid = r['place_id']
    >>> len(r['name_ids'])
    1

Check feature

    >>> p = folder['places'][pid]
    >>> contents = list(p.getFeatures())
    >>> len(contents)
    1    
    >>> f = contents[0]
    >>> f.getLocations()
    []
    >>> f.getFeatureType()
    'undefined'
