Batch Loading of Entities
=========================

Check catalogs
--------------

    >>> uc = self.portal.uid_catalog
    >>> rc = self.portal.reference_catalog

Setup
-----

    Enable types

    >>> lpf = self.portal.portal_types['Large Plone Folder']
    >>> lpf_allow = lpf.global_allow
    >>> lpf.global_allow = True

    >>> n = self.portal.portal_types['GeographicName']
    >>> n_allow = n.global_allow
    >>> n.global_allow = True

    >>> n = self.portal.portal_types['EthnicName']
    >>> n_allow = n.global_allow
    >>> n.global_allow = True

    Alias the test folder

    >>> folder = self.folder

    Containers

    >>> _ = folder.invokeFactory('Large Plone Folder', id='names')
    >>> _ = folder.invokeFactory('LocationContainer', id='locations')
    >>> _ = folder.invokeFactory('PlaceContainer', id='places')

Utility tests
-------------

    >>> format_listofstrings([])
    u''
    >>> format_listofstrings(['x'])
    u'x'
    >>> format_listofstrings(['x', 'y'])
    u'x and y'
    >>> format_listofstrings(['x', 'y', 'z'])
    u'x, y and z'
    
    >>> purifyText(u'aaa') == u'aaa'
    True
    >>> purifyText(u'abab') == u'abab'
    True
    >>> purifyText(u'Magie\U000000A01950,\U000000A0989') == u'Magie 1950, 989'
    True
   
Load one entity
---------------

    >>> r = load_place(folder, "%s/batlas-65-2-24-grc.xml" % TEST_DATA)
    >>> r['place_id']
    '0'
    >>> r['name_ids']
    ['aphrodisias', 'ninoe', 'aphrodisieus']
    >>> r['location_ids']
    ['0']

    Test place

    >>> p = getattr(folder.places, '0')
    >>> p.title_or_id()
    u'Aphrodisias/Ninoe/Aphrodisieus'
    >>> p.Title()
    u'Aphrodisias/Ninoe/Aphrodisieus'
    >>> p.modernLocation
    u'Geyre'
    >>> p.placeType
    u'settlement'
    >>> p.Creators()
    ('C. Foss (compiler, west)', 'S. Mitchell (compiler)')
    >>> p.Contributors()
    ('R. Talbert (editor)', 'T. Elliott (data normalization and xml encoding)')
    >>> p.Rights()
    "Copyright \xc2\xa9 2006 Ancient World Mapping Center. All rights reserved. This data is derived from original compilations prepared for the American Philological Association's Classical Atlas Project (1988-2000). It is used here with permission of the APA. This data is intended solely for testing purposes in the context of the Ancient World Mapping Center's Pleiades Project and may not be reused or redistributed. In its current state, this data may contain errors and omissions and is not appropriate for citation or scholarly use. Any errors or omissions are the result of prototype conversion software, still under development by the AWMC's Pleiades Project, and do not reflect the quality and completeness of the original data nor the opinions of its scholarly compilers and editors."

    Test names

    >>> n0 = getattr(folder.names, 'aphrodisias')
    >>> n0.title
    u'Aphrodisias'
    >>> n0.nameAttested
    u'\u1f08\u03c6\u03c1\u03bf\u03b4\u03b9\u03c3\u03b9\u1f71\u03c2'
    >>> n0.Creators()
    ('C. Foss (compiler, west)', 'S. Mitchell (compiler)')
    >>> n0.Contributors()
    ('R. Talbert (editor)', 'T. Elliott (data normalization and xml encoding)')
    >>> n0.Rights()
    "Copyright \xc2\xa9 2006 Ancient World Mapping Center. All rights reserved. This data is derived from original compilations prepared for the American Philological Association's Classical Atlas Project (1988-2000). It is used here with permission of the APA. This data is intended solely for testing purposes in the context of the Ancient World Mapping Center's Pleiades Project and may not be reused or redistributed. In its current state, this data may contain errors and omissions and is not appropriate for citation or scholarly use. Any errors or omissions are the result of prototype conversion software, still under development by the AWMC's Pleiades Project, and do not reflect the quality and completeness of the original data nor the opinions of its scholarly compilers and editors."

    >>> n1 = getattr(folder.names, 'ninoe')
    >>> n1.title
    u'Ninoe'
    >>> n1.nameAttested
    u'\u039d\u03b9\u03bd\u1f79\u03b7'

    >>> n2 = getattr(folder.names, 'aphrodisieus')
    >>> n2.title
    u'Aphrodisieus'
    >>> n2.nameAttested
    u'\u1f08\u03c6\u03c1\u03bf\u03b4\u03b9\u03c3\u03b9\u03b5\u1f7b\u03c2'


    Test locations

    >>> l = getattr(folder.locations, '0')
    >>> l.geometryType
    u'Point'
    >>> l.spatialCoordinates
    u'37.7144599999992 28.7288599999993'
    >>> l.title_or_id()
    u'Point 0'
    >>> l.Title()
    u'Point 0'
    >>> l.Creators()
    ('C. Foss (compiler, west)', 'S. Mitchell (compiler)')
    >>> l.Contributors()
    ('R. Talbert (editor)', 'T. Elliott (data normalization and xml encoding)')
    >>> l.Rights()
    "Copyright \xc2\xa9 2006 Ancient World Mapping Center. All rights reserved. This data is derived from original compilations prepared for the American Philological Association's Classical Atlas Project (1988-2000). It is used here with permission of the APA. This data is intended solely for testing purposes in the context of the Ancient World Mapping Center's Pleiades Project and may not be reused or redistributed. In its current state, this data may contain errors and omissions and is not appropriate for citation or scholarly use. Any errors or omissions are the result of prototype conversion software, still under development by the AWMC's Pleiades Project, and do not reflect the quality and completeness of the original data nor the opinions of its scholarly compilers and editors."

    Test references

    >>> p.getRefs('name_name')[0] == n0
    True
    >>> p.getRefs('name_name')[1] == n1
    True
    >>> p.getRefs('name_name')[2] == n2
    True
    >>> p.getRefs('location_location')[0] == l
    True

