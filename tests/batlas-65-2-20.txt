
    # test programmatic manipulation of geoEntities and geoNames using data associated with entity ID = batlas-65-2-20
    # this set of tests procedes attribute-wise and does not test the load-from-file capabilities; there are other tests for that
        
    # set up a test folder in which to create the entity and its children
    >>> folder = self.folder
        
    # create a geographic entity and verify that we can set and retrieve its Plone id
    >>> enID = 'batlas-65-2-20'
    >>> folder.invokeFactory('GeographicEntityLite', id=enID)
    'batlas-65-2-20'
        
    # get a pointer to the entity, then verify we can set and retrieve its interim title
    >>> en = getattr(folder, enID)
    >>> en.setTitle(enID)
    >>> en.Title()
    'batlas-65-2-20'
        
    # verify that we can set and retrieve the value of the identifier attribute
    >>> en.setIdentifier(enID)
    >>> en.getIdentifier()
    'batlas-65-2-20'
    
    # verify that we can set and retrieve the value of the modernLocation attribute
    >>> sourcetext = u'Ka\U0000015F'
    >>> sourcetext_utf8 = sourcetext.encode('utf8')
    >>> en.setModernLocation(sourcetext_utf8)
    >>> resulttext_utf8 = en.getModernLocation()
    >>> resulttext_utf8 == sourcetext_utf8
    True
    >>> resulttext = unicode(resulttext_utf8, 'utf8')
    >>> resulttext == sourcetext
    True
    >>> resulttext == u'Ka\U0000015F'
    True
    
    # verify that we can set and retrieve a list of timePeriods 
    >>> sourcelist = ['Classical', 'Hellenistic (Roman Republic)', 'Roman', 'Late Antique']
    >>> en.setTimePeriods(sourcelist)
    >>> results = en.getTimePeriods()
    
    >>> results[0] == 'Classical'
    True
    
    >>> results[1] == 'Hellenistic (Roman Republic)'
    True
    
    >>> results[2] == 'Roman'
    True
    
    >>> results[3] == 'Late Antique'
    True
    
    # verify that we can set and retrieve the appropriate classification type(s)
    >>> en.setGeoEntityType('settlement')
    >>> en.getGeoEntityType()
    'settlement'
    
    # verify that we can set and retrieve a list of secondaryReferences
        
    >>> sourcelist = [u'BAtlas 65 C5 Antiphellos/Habesos', u'NPauly']
            
    >>> en.setSecondaryReferences(sourcelist)
    >>> resultlist = en.getSecondaryReferences()
                
    >>> resultlist[0] == sourcelist[0].encode('utf8')
    True
    
    >>> resultlist[1] == sourcelist[1].encode('utf8')
    True
    
    # verify that we can set and retrieve the spatialLocation and spatialGeometryType
        
    >>> en.setSpatialCoordinates('36.1931800000002 29.6370399999996 0.0')
    >>> en.getSpatialCoordinates()
    '36.1931800000002 29.6370399999996 0.0'        
    >>> en.setSpatialGeometryType('point')
    >>> en.getSpatialGeometryType()
    'point'        
    
    # verify that we can set and retrieve all information about the featureName
        

    # create a geographic name and verify that we can set and retrieve its Plone id
    >>> nameID = 'batlas-65-2-20-n1'
    >>> en.invokeFactory('GeographicNameLite', id=nameID)
    'batlas-65-2-20-n1'
    >>> en_name = getattr(en, nameID)
        
    # verify that we can set and retrieve the name's identifier value
    >>> en_name.setIdentifier('batlas-65-2-20-n1')
    >>> en_name.getIdentifier()
    'batlas-65-2-20-n1'
        
     # verify that we can set and retrieve an appropriate value for the description attribute
    >>> soughtDescription = u'An ancient geographic name for a settlement, attested during the Hellenistic (Roman Republic), Roman and Late Antique periods.'
    >>> en_name.setDescription(soughtDescription)
    >>> gotDescription = en_name.Description()
    >>> soughtDescription_utf8 = soughtDescription.encode('utf8')
    >>> soughtDescription_utf8 == gotDescription
    True
        

    # verify that we can set and retrieve an appropriate value for the name's title attribute (which should be an ASCII transliteration of the nameAttested value)        
    >>> en_name.setTitle('Antiphellos')
    >>> en_name.Title()
    'Antiphellos'
    
    # verify that we can set and retrieve the appropriate classification type(s)
    >>> en_name.setGeoNameType('geographic')
    >>> en_name.getGeoNameType()
    'geographic'
    
    # verify that we can set and retrieve a list of timePeriods 
    >>> sourcelist = ['Hellenistic (Roman Republic)', 'Roman', 'Late Antique']
    >>> en_name.setTimePeriods(sourcelist)
    >>> results = en_name.getTimePeriods()
    
    >>> results[0] == 'Hellenistic (Roman Republic)'
    True
    
    >>> results[1] == 'Roman'
    True
    
    >>> results[2] == 'Late Antique'
    True
    
    # verify that we can set and retrieve a list of contributors
    >>> sourcelist = [u'C. Foss (compiler, west)', u'S. Mitchell (compiler)']
            
    >>> en_name.setCreators(sourcelist)
    >>> results = en_name.Creators()
                
    >>> results[0] == u'C. Foss (compiler, west)'
    True
    
    >>> results[1] == u'S. Mitchell (compiler)'
    True
    
    # verify that we can set and retrieve a list of contributors
    >>> sourcelist = [u'R. Talbert (editor)', u'T. Elliott (data normalization and xml encoding)']
            
    >>> en_name.setContributors(sourcelist)
    >>> results = en_name.Contributors()
                
    >>> results[0] == u'R. Talbert (editor)'
    True
    
    >>> results[1] == u'T. Elliott (data normalization and xml encoding)'
    True
    
    # verify that we can set and retrieve an appropriate value for the rights attribute
    >>> sourcetext = u'Copyright \U000000A9 2006 Ancient World Mapping Center. All rights reserved. This data is derived from original compilations prepared for the American Philological Association\U00000027s Classical Atlas Project (1988-2000). It is used here with permission of the APA. This data is intended solely for testing purposes in the context of the Ancient World Mapping Center\U00000027s Pleiades Project and may not be reused or redistributed. In its current state, this data may contain errors and omissions and is not appropriate for citation or scholarly use. Any errors or omissions are the result of prototype conversion software, still under development by the AWMC\U00000027s Pleiades Project, and do not reflect the quality and completeness of the original data nor the opinions of its scholarly compilers and editors.'
    >>> sourcetext_utf8 = sourcetext.encode('utf8')
        
    >>> en_name.setRights(sourcetext_utf8)
    >>> resulttext_utf8 = en_name.Rights()
            
    >>> resulttext_utf8 == sourcetext_utf8
    True
    >>> resulttext = unicode(resulttext_utf8, 'utf8')
    >>> resulttext == sourcetext
    True
    >>> resulttext == u'Copyright \U000000A9 2006 Ancient World Mapping Center. All rights reserved. This data is derived from original compilations prepared for the American Philological Association\U00000027s Classical Atlas Project (1988-2000). It is used here with permission of the APA. This data is intended solely for testing purposes in the context of the Ancient World Mapping Center\U00000027s Pleiades Project and may not be reused or redistributed. In its current state, this data may contain errors and omissions and is not appropriate for citation or scholarly use. Any errors or omissions are the result of prototype conversion software, still under development by the AWMC\U00000027s Pleiades Project, and do not reflect the quality and completeness of the original data nor the opinions of its scholarly compilers and editors.'
    True
    
    # verify that we can set and retrieve all information about the featureName
        

    # create a geographic name and verify that we can set and retrieve its Plone id
    >>> nameID = 'batlas-65-2-20-n2'
    >>> en.invokeFactory('GeographicNameLite', id=nameID)
    'batlas-65-2-20-n2'
    >>> en_name = getattr(en, nameID)
        
    # verify that we can set and retrieve the name's identifier value
    >>> en_name.setIdentifier('batlas-65-2-20-n2')
    >>> en_name.getIdentifier()
    'batlas-65-2-20-n2'
        
     # verify that we can set and retrieve an appropriate value for the description attribute
    >>> soughtDescription = u'An ancient geographic name for a settlement, attested during the Classical period.'
    >>> en_name.setDescription(soughtDescription)
    >>> gotDescription = en_name.Description()
    >>> soughtDescription_utf8 = soughtDescription.encode('utf8')
    >>> soughtDescription_utf8 == gotDescription
    True
        

    # verify that we can set and retrieve an appropriate value for the name's title attribute (which should be an ASCII transliteration of the nameAttested value)        
    >>> en_name.setTitle('Habesos')
    >>> en_name.Title()
    'Habesos'
    
    # verify that we can set and retrieve the appropriate classification type(s)
    >>> en_name.setGeoNameType('geographic')
    >>> en_name.getGeoNameType()
    'geographic'
    
    # verify that we can set and retrieve a list of timePeriods 
    >>> sourcelist = ['Classical']
    >>> en_name.setTimePeriods(sourcelist)
    >>> results = en_name.getTimePeriods()
    
    >>> results[0] == 'Classical'
    True
    
    # verify that we can set and retrieve a list of contributors
    >>> sourcelist = [u'C. Foss (compiler, west)', u'S. Mitchell (compiler)']
            
    >>> en_name.setCreators(sourcelist)
    >>> results = en_name.Creators()
                
    >>> results[0] == u'C. Foss (compiler, west)'
    True
    
    >>> results[1] == u'S. Mitchell (compiler)'
    True
    
    # verify that we can set and retrieve a list of contributors
    >>> sourcelist = [u'R. Talbert (editor)', u'T. Elliott (data normalization and xml encoding)']
            
    >>> en_name.setContributors(sourcelist)
    >>> results = en_name.Contributors()
                
    >>> results[0] == u'R. Talbert (editor)'
    True
    
    >>> results[1] == u'T. Elliott (data normalization and xml encoding)'
    True
    
    # verify that we can set and retrieve an appropriate value for the rights attribute
    >>> sourcetext = u'Copyright \U000000A9 2006 Ancient World Mapping Center. All rights reserved. This data is derived from original compilations prepared for the American Philological Association\U00000027s Classical Atlas Project (1988-2000). It is used here with permission of the APA. This data is intended solely for testing purposes in the context of the Ancient World Mapping Center\U00000027s Pleiades Project and may not be reused or redistributed. In its current state, this data may contain errors and omissions and is not appropriate for citation or scholarly use. Any errors or omissions are the result of prototype conversion software, still under development by the AWMC\U00000027s Pleiades Project, and do not reflect the quality and completeness of the original data nor the opinions of its scholarly compilers and editors.'
    >>> sourcetext_utf8 = sourcetext.encode('utf8')
        
    >>> en_name.setRights(sourcetext_utf8)
    >>> resulttext_utf8 = en_name.Rights()
            
    >>> resulttext_utf8 == sourcetext_utf8
    True
    >>> resulttext = unicode(resulttext_utf8, 'utf8')
    >>> resulttext == sourcetext
    True
    >>> resulttext == u'Copyright \U000000A9 2006 Ancient World Mapping Center. All rights reserved. This data is derived from original compilations prepared for the American Philological Association\U00000027s Classical Atlas Project (1988-2000). It is used here with permission of the APA. This data is intended solely for testing purposes in the context of the Ancient World Mapping Center\U00000027s Pleiades Project and may not be reused or redistributed. In its current state, this data may contain errors and omissions and is not appropriate for citation or scholarly use. Any errors or omissions are the result of prototype conversion software, still under development by the AWMC\U00000027s Pleiades Project, and do not reflect the quality and completeness of the original data nor the opinions of its scholarly compilers and editors.'
    True
    
    # verify that we can set and retrieve a list of contributors
    >>> sourcelist = [u'C. Foss (compiler, west)', u'S. Mitchell (compiler)']
            
    >>> en.setCreators(sourcelist)
    >>> results = en.Creators()
                
    >>> results[0] == u'C. Foss (compiler, west)'
    True
    
    >>> results[1] == u'S. Mitchell (compiler)'
    True
    
    # verify that we can set and retrieve a list of contributors
    >>> sourcelist = [u'R. Talbert (editor)', u'T. Elliott (data normalization and xml encoding)']
            
    >>> en.setContributors(sourcelist)
    >>> results = en.Contributors()
                
    >>> results[0] == u'R. Talbert (editor)'
    True
    
    >>> results[1] == u'T. Elliott (data normalization and xml encoding)'
    True
    
    # verify that we can set and retrieve an appropriate value for the rights attribute
    >>> sourcetext = u'Copyright \U000000A9 2006 Ancient World Mapping Center. All rights reserved. This data is derived from original compilations prepared for the American Philological Association\U00000027s Classical Atlas Project (1988-2000). It is used here with permission of the APA. This data is intended solely for testing purposes in the context of the Ancient World Mapping Center\U00000027s Pleiades Project and may not be reused or redistributed. In its current state, this data may contain errors and omissions and is not appropriate for citation or scholarly use. Any errors or omissions are the result of prototype conversion software, still under development by the AWMC\U00000027s Pleiades Project, and do not reflect the quality and completeness of the original data nor the opinions of its scholarly compilers and editors.'
    >>> sourcetext_utf8 = sourcetext.encode('utf8')
        
    >>> en.setRights(sourcetext_utf8)
    >>> resulttext_utf8 = en.Rights()
            
    >>> resulttext_utf8 == sourcetext_utf8
    True
    >>> resulttext = unicode(resulttext_utf8, 'utf8')
    >>> resulttext == sourcetext
    True
    >>> resulttext == u'Copyright \U000000A9 2006 Ancient World Mapping Center. All rights reserved. This data is derived from original compilations prepared for the American Philological Association\U00000027s Classical Atlas Project (1988-2000). It is used here with permission of the APA. This data is intended solely for testing purposes in the context of the Ancient World Mapping Center\U00000027s Pleiades Project and may not be reused or redistributed. In its current state, this data may contain errors and omissions and is not appropriate for citation or scholarly use. Any errors or omissions are the result of prototype conversion software, still under development by the AWMC\U00000027s Pleiades Project, and do not reflect the quality and completeness of the original data nor the opinions of its scholarly compilers and editors.'
    True
    
    # check to see that programmatic renaming of the entity on the basis of its subordinate names works as expected
    
    >>> finalTitle = setGeoTitleFromNames(en)
     
    >>> soughtFinalTitle = u'Antiphellos/Habesos'
    >>> soughtFinalTitle_utf8 = soughtFinalTitle.encode('utf8')
    >>> finalTitle == soughtFinalTitle_utf8
    True
    >>> finalTitle = en.Title()
    >>> finalTitle == soughtFinalTitle_utf8
    True

    # check to see that we can set and retrieve a description
    >>> soughtDescription = u'An ancient settlement, attested during the Classical, Hellenistic (Roman Republic), Roman and Late Antique periods (modern location: Ka\U0000015F). It was known in antiquity by the names: Antiphellos and Habesos.'
    >>> en.setDescription(soughtDescription)
    >>> gotDescription = en.Description()
    >>> soughtDescription_utf8 = soughtDescription.encode('utf8')
    >>> soughtDescription_utf8 == gotDescription
    True
    
    